<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GDB</title>
      <link href="/blog/2022/04/04/GDB/"/>
      <url>/blog/2022/04/04/GDB/</url>
      
        <content type="html"><![CDATA[<h1 id="GDB-Pwndbg"><a href="#GDB-Pwndbg" class="headerlink" title="GDB + Pwndbg"></a>GDB + Pwndbg</h1><blockquote><p>参考： </p><ul><li><a href="https://sourceware.org/gdb/onlinedocs/gdb/">Debugging with GDB</a></li><li><a href="https://evilpan.com/2020/09/13/gdb-tips/">GDB的那些奇淫技巧-evilpan</a></li></ul></blockquote><p>整理一下 gdb + pwndbg 的一些常用命令</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">gdb program</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">运行程序，简写r</span></span><br><span class="line">(gdb) run</span><br><span class="line">(gdb) r</span><br><span class="line"><span class="meta"># </span><span class="language-bash">带参数运行程序(method 1)</span></span><br><span class="line">(gdb) run arg1 arg2 </span><br><span class="line"><span class="meta"># </span><span class="language-bash">带参数运行程序(method 2)</span></span><br><span class="line">(gdb) set args arg1 arg2</span><br><span class="line">(gdb) run</span><br><span class="line"><span class="meta"># </span><span class="language-bash">指定标准输入</span></span><br><span class="line">(gdb) run &lt;file</span><br><span class="line">(gdb) run &lt; &lt;(python3 -c &#x27;print(b&quot;A&quot;*10)&#x27;)</span><br><span class="line">(gdb) run &lt;&lt;&lt;$(python3 -c &#x27;print(b&quot;A&quot;*10)&#x27;)</span><br><span class="line"><span class="meta"># </span><span class="language-bash">链接到正在运行的进程，并进行调试</span></span><br><span class="line">(gdb) attach &#123;process-id&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">断开链接</span></span><br><span class="line">(gdb) detach</span><br></pre></td></tr></table></figure><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">添加断点(指定函数名)</span></span><br><span class="line">(gdb) break main</span><br><span class="line"><span class="meta"># </span><span class="language-bash">添加断点(指定内存地址)</span></span><br><span class="line">(gdb) break *0x00400123</span><br><span class="line"><span class="meta"># </span><span class="language-bash">列出所有断点信息(简写info <span class="built_in">break</span>)</span></span><br><span class="line">(gdb) info breakpoints </span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除编号为1的断点</span></span><br><span class="line">(gdb) delete 1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除所有断点(简写del)</span></span><br><span class="line">(gdb) delete</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除内存地址的断点</span></span><br><span class="line">(gdb) clear *0x00400123</span><br><span class="line"><span class="meta"># </span><span class="language-bash">禁用指定编号断点</span></span><br><span class="line">(gdb) disable 2</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启用指定编号断点</span></span><br><span class="line">(gdb) enable 2</span><br><span class="line"><span class="meta"># </span><span class="language-bash">条件断点</span></span><br><span class="line">(gdb) condition &#123;id&#125; &#123;expr&#125;</span><br><span class="line">                  2   i == 10  # 只有在 i==10 成立时2号断点生效</span><br><span class="line"><span class="meta"># </span><span class="language-bash">继续执行(简写c)</span></span><br><span class="line">(gdb) continue</span><br><span class="line"><span class="meta"># </span><span class="language-bash">单步进入(遇到函数会进入)</span></span><br><span class="line">(gdb) stepi</span><br><span class="line"><span class="meta"># </span><span class="language-bash">单步跳过(遇到函数不会进入)</span></span><br><span class="line">(gdb) nexti</span><br><span class="line"><span class="meta"># </span><span class="language-bash">结束当前函数</span></span><br><span class="line">(gdb) finish</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看指定函数附近的代码</span></span><br><span class="line">(gdb) list main  </span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看指定地址的代码</span></span><br><span class="line">(gdb) list *0x00400800</span><br><span class="line"><span class="meta"># </span><span class="language-bash">添加源代码搜索路径</span></span><br><span class="line">(gdb) dir &#123;dirpath&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">复原源代码搜索路径</span></span><br><span class="line">(gdb) dir </span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看源代码搜索路径</span></span><br><span class="line">(gdb) show directories</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印当前执行函数的汇编代码</span></span><br><span class="line">(gdb) disas</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印指定函数的反汇编代码</span></span><br><span class="line">(gdb) disas main</span><br><span class="line"><span class="meta"># </span><span class="language-bash">对指定地址进行反汇编</span></span><br><span class="line">(gdb) disas &#123;address&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印程序中的函数</span></span><br><span class="line">(gdb) info functions</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">打印backtrace(简写bt)</span></span><br><span class="line">(gdb) backtrace</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印当前运行的栈帧</span></span><br><span class="line">(gdb) frame</span><br><span class="line"><span class="meta"># </span><span class="language-bash">切换到指定编号的栈帧</span></span><br><span class="line">(gdb) frame &#123;id&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">显示当前函数参数</span></span><br><span class="line">(gdb) info args</span><br></pre></td></tr></table></figure><h2 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">打印出表达式结果</span></span><br><span class="line">(gdb) print &#123;expression&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">十六进制输出结果</span></span><br><span class="line">(gdb) print /x &#123;expr&#125;</span><br><span class="line">/x 十六进制</span><br><span class="line">/o 八进制</span><br><span class="line">/d 十进制</span><br><span class="line">/t 二进制 </span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印历史记录条目</span></span><br><span class="line">(gdb) print $1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印指定寄存器数据</span></span><br><span class="line">(gdb) print /x $rax</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">从指定地址处读取数据</span></span><br><span class="line">(gdb) x/[数量][长度单位][显示格式] where</span><br><span class="line">长度单位:</span><br><span class="line">/b 以1字节为单位读取数据</span><br><span class="line">/w 以4字节为单位读取数据</span><br><span class="line">/g 以8字节为单位读取数据</span><br><span class="line"></span><br><span class="line">/i 尝试解析成汇编</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">(gdb) x/8gx $rsp+8</span><br><span class="line">0x7fffffffe478:0x00007fffffffe6ef0x0000000000000000</span><br><span class="line">0x7fffffffe488:0x00007fffffffe70e0x00007fffffffe729</span><br><span class="line">0x7fffffffe498:0x00007fffffffe7390x00007fffffffe74c</span><br><span class="line">0x7fffffffe4a8:0x00007fffffffe7580x00007fffffffe767</span><br><span class="line">(gdb) x/4wd $rsp+8</span><br><span class="line">0x7fffffffe478:-64173276700</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">pwndbg 中加入的 db(dump byte) dw(dump word) dq(dump qword)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">db address [count] , 命令后可以指定打印的数量, 不指定则使用默认值</span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">db <span class="variable">$rsp</span></span></span><br><span class="line">00007fffffffe470     01 00 00 00 00 00 00 00 ef e6 ff ff ff 7f 00 00</span><br><span class="line">00007fffffffe480     00 00 00 00 00 00 00 00 0e e7 ff ff ff 7f 00 00</span><br><span class="line">00007fffffffe490     29 e7 ff ff ff 7f 00 00 39 e7 ff ff ff 7f 00 00</span><br><span class="line">00007fffffffe4a0     4c e7 ff ff ff 7f 00 00 58 e7 ff ff ff 7f 00 00</span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">dw <span class="variable">$rsp</span></span></span><br><span class="line">00007fffffffe470     0001 0000 0000 0000 e6ef ffff 7fff 0000</span><br><span class="line">00007fffffffe480     0000 0000 0000 0000 e70e ffff 7fff 0000</span><br><span class="line">00007fffffffe490     e729 ffff 7fff 0000 e739 ffff 7fff 0000</span><br><span class="line">00007fffffffe4a0     e74c ffff 7fff 0000 e758 ffff 7fff 0000</span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">dq <span class="variable">$rsp</span></span></span><br><span class="line">00007fffffffe470     0000000000000001 00007fffffffe6ef</span><br><span class="line">00007fffffffe480     0000000000000000 00007fffffffe70e</span><br><span class="line">00007fffffffe490     00007fffffffe729 00007fffffffe739</span><br><span class="line">00007fffffffe4a0     00007fffffffe74c 00007fffffffe758</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看寄存器数据</span></span><br><span class="line">(gdb) info registers</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印本地局部变量</span></span><br><span class="line">(gdb) info locals</span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印全局变量名称</span></span><br><span class="line">(gdb) info variables</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看类型定义</span></span><br><span class="line">(gdb) ptype &#123;typename&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">ptype main_arena</span></span><br><span class="line">type = struct malloc_state &#123;</span><br><span class="line">    __libc_lock_t mutex;</span><br><span class="line">    int flags;</span><br><span class="line">    int have_fastchunks;</span><br><span class="line">    mfastbinptr fastbinsY[10];</span><br><span class="line">    mchunkptr top;</span><br><span class="line">    mchunkptr last_remainder;</span><br><span class="line">    mchunkptr bins[254];</span><br><span class="line">    unsigned int binmap[4];</span><br><span class="line">    struct malloc_state *next;</span><br><span class="line">    struct malloc_state *next_free;</span><br><span class="line">    size_t attached_threads;</span><br><span class="line">    size_t system_mem;</span><br><span class="line">    size_t max_system_mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">pwndbg 中加入 dt (Dump out information on a <span class="built_in">type</span> (e.g. ucontext_t).)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">打印指定类型的信息（可选指定address）</span></span><br><span class="line">dt typename [address] </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">dt FILE</span></span><br><span class="line">FILE</span><br><span class="line">    +0x0000 _flags               : int</span><br><span class="line">    +0x0008 _IO_read_ptr         : char *</span><br><span class="line">    +0x0010 _IO_read_end         : char *</span><br><span class="line">    +0x0018 _IO_read_base        : char *</span><br><span class="line">    +0x0020 _IO_write_base       : char *</span><br><span class="line">    +0x0028 _IO_write_ptr        : char *</span><br><span class="line">    +0x0030 _IO_write_end        : char *</span><br><span class="line">    +0x0038 _IO_buf_base         : char *</span><br><span class="line">    +0x0040 _IO_buf_end          : char *</span><br><span class="line">    +0x0048 _IO_save_base        : char *</span><br><span class="line">    +0x0050 _IO_backup_base      : char *</span><br><span class="line">    +0x0058 _IO_save_end         : char *</span><br><span class="line">    +0x0060 _markers             : struct _IO_marker *</span><br><span class="line">    +0x0068 _chain               : struct _IO_FILE *</span><br><span class="line">    +0x0070 _fileno              : int</span><br><span class="line">    +0x0074 _flags2              : int</span><br><span class="line">    +0x0078 _old_offset          : __off_t</span><br><span class="line">    +0x0080 _cur_column          : short unsigned int</span><br><span class="line">    +0x0082 _vtable_offset       : signed char</span><br><span class="line">    +0x0083 _shortbuf            : char [1]</span><br><span class="line">    +0x0088 _lock                : _IO_lock_t *</span><br><span class="line">    +0x0090 _offset              : __off64_t</span><br><span class="line">    +0x0098 _codecvt             : struct _IO_codecvt *</span><br><span class="line">    +0x00a0 _wide_data           : struct _IO_wide_data *</span><br><span class="line">    +0x00a8 _freeres_list        : struct _IO_FILE *</span><br><span class="line">    +0x00b0 _freeres_buf         : void *</span><br><span class="line">    +0x00b8 __pad5               : size_t</span><br><span class="line">    +0x00c0 _mode                : int</span><br><span class="line">    +0x00c4 _unused2             : char [20]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">显示malloc_state结构体信息（有各个字段的偏移</span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">dt <span class="string">&quot;struct malloc_state&quot;</span></span></span><br><span class="line">struct malloc_state</span><br><span class="line">    +0x0000 mutex                : __libc_lock_t</span><br><span class="line">    +0x0004 flags                : int</span><br><span class="line">    +0x0008 have_fastchunks      : int</span><br><span class="line">    +0x0010 fastbinsY            : mfastbinptr [10]</span><br><span class="line">    +0x0060 top                  : mchunkptr</span><br><span class="line">    +0x0068 last_remainder       : mchunkptr</span><br><span class="line">    +0x0070 bins                 : mchunkptr [254]</span><br><span class="line">    +0x0860 binmap               : unsigned int [4]</span><br><span class="line">    +0x0870 next                 : struct malloc_state *</span><br><span class="line">    +0x0878 next_free            : struct malloc_state *</span><br><span class="line">    +0x0880 attached_threads     : size_t</span><br><span class="line">    +0x0888 system_mem           : size_t</span><br><span class="line">    +0x0890 max_system_mem       : size_t</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">pwndbg 中加入 xinfo(Shows offsets of the specified address to useful other locations)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">显示指定地址到有用位置的偏移</span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">xinfo [address]</span>  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">xinfo</span></span><br><span class="line">Extended information for virtual address 0x5555555548d0:</span><br><span class="line"></span><br><span class="line">  Containing mapping:</span><br><span class="line">    0x555555554000     0x55555555a000 r-xp     6000 0      /home/ubuntu/Documents/pwn/pwn</span><br><span class="line"></span><br><span class="line">  Offset information:</span><br><span class="line">         Mapped Area 0x5555555548d0 = 0x555555554000 + 0x8d0</span><br><span class="line">         File (Base) 0x5555555548d0 = 0x555555554000 + 0x8d0</span><br><span class="line">      File (Segment) 0x5555555548d0 = 0x555555554000 + 0x8d0</span><br><span class="line">         File (Disk) 0x5555555548d0 = /home/ubuntu/Documents/pwn/pwn + 0x8d0</span><br><span class="line"></span><br><span class="line"> Containing ELF sections:</span><br><span class="line">               .text 0x5555555548d0 = 0x5555555548d0 + 0x0</span><br></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">vis_heap_chunks(Visualize chunks on a heap, default to the current arena<span class="string">&#x27;s active heap.)</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="string">可视化显示当前堆分配情况</span></span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash"><span class="string">vis_heap_chunks</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="string">heap、bins、fastbins、smallbins、largebins、tcache、tcachebins</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="string">malloc_chunk(Print a chunk.)</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"><span class="string">打印出指定地址的 malloc_chunk</span></span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash"><span class="string">malloc_chunk [addr]</span></span> </span><br></pre></td></tr></table></figure><h2 id="进程调试"><a href="#进程调试" class="headerlink" title="进程调试"></a>进程调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">设置当进程调用fork时是否进入子进程</span></span><br><span class="line">(gdb) set follow-fork-mode parent/child </span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看历史命令</span></span><br><span class="line">(gdb) show commands</span><br><span class="line"><span class="meta"># </span><span class="language-bash">执行上一条命令</span></span><br><span class="line">(gdb) &lt;enter&gt;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">从文件中加载gdb命令</span></span><br><span class="line">(gdb) source &#123;filepath&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">退出gdb (简写q)</span></span><br><span class="line">(gdb) quit</span><br><span class="line"><span class="meta"># </span><span class="language-bash">帮助</span></span><br><span class="line">(gdb) help</span><br></pre></td></tr></table></figure><p><strong>pwndbg:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">设置默认只显示源代码段</span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> context-sections code</span> </span><br><span class="line"><span class="meta"># </span><span class="language-bash">显示源代码段</span></span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">ctx code</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Tools </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/blog/2022/03/13/docker/"/>
      <url>/blog/2022/03/13/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>学习资料：<a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Docker 是一个开源的应用容器引擎。</li><li>Docker 是一种容器技术，解决软件跨环境迁移的问题，属于操作系统层面的虚拟化技术。</li><li>Docker架构：<a href="https://www.runoob.com/docker/docker-architecture.html">https://www.runoob.com/docker/docker-architecture.html</a></li></ul><p>三个基本概念：</p><ul><li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/image">镜像（Image）</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/container">容器（Container）</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/repository">仓库（Repository）</a></li></ul><p>更详细的介绍见学习资料↑</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p></blockquote><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="服务相关命令"><a href="#服务相关命令" class="headerlink" title="服务相关命令"></a>服务相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">          状态   启动   重启    停止 开机自启 禁用自启</span></span><br><span class="line">systemctl [status|start|restart|stop|enable|disable] docker</span><br></pre></td></tr></table></figure><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images           # 查看现有镜像</span><br><span class="line">docker search redis     # 搜索镜像(例如redis)</span><br><span class="line">docker pull redis:5.0   # 拉取5.0版本redis镜像,不指定镜像仓库地址则从docker.io获取镜像,不指定tag则默认是:latest</span><br><span class="line">docker rmi cefde848bd49 # 删除镜像(可根据IMAGE ID或名称删除, ID可使用短ID,一般取三个字符能区分其他镜像即可)</span><br></pre></td></tr></table></figure><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c1 -p 80:80 -v /home/test/web:/web centos:7 /bin/bash # 启动容器</span><br><span class="line">docker run -id --name=c2 -p 80:80 -v /home/test/web:/web centos:7           # 后台启动容器</span><br><span class="line">-it 交互式容器(-t终端,-i标准输入保持打开)</span><br><span class="line">-id 守护式容器(-d后台)</span><br><span class="line">--name 指定容器名称</span><br><span class="line">-v 宿主机目录(文件):容器内目录(文件) # 将宿主机的目录挂载到容器中</span><br><span class="line">-p 宿主机端口号:容器端口号          # 将容器端口映射到宿主机中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker exec -it c2 /bin/bash # 进入容器</span><br><span class="line">docker ps                    # 查看正在运行的容器</span><br><span class="line">docker ps -a                 # 查看所有容器</span><br><span class="line">docker stop c2               # 停止容器(根据CONTAINER ID或NAMES指定)</span><br><span class="line">docker rm c1                 # 删除容器</span><br><span class="line"></span><br><span class="line">docker rm `docker ps -aq`    # 删除所有容器</span><br><span class="line">docker rmi `docker images -q redis` # 删除所有仓库名为redis的镜像</span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) # 停止并删除所有容器</span><br></pre></td></tr></table></figure><h3 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker volume create vol-demo  # 创建一个名为 vol-demo 的数据卷</span><br><span class="line">docker volume ls               # 查看所有的数据卷</span><br><span class="line">docker volume inspect vol-demo # 查看 vol-demo 数据卷的信息</span><br><span class="line">docker volume rm vol-demo      # 删除 vol-demo 数据卷</span><br><span class="line">docker volume prune            # 删除无主数据</span><br><span class="line">docker run -d -P --name web --mount source=vol-demo,target=/web nginx # 挂载数据卷</span><br></pre></td></tr></table></figure><ul><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li><li>容器删除后，数据卷仍然存在</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">通过mount将宿主机目录挂载到容器，可通过添加,read-only限制只读</span></span><br><span class="line">--mount type=bind,source=/home/test/web,target=/web,read-only </span><br></pre></td></tr></table></figure><h3 id="查看信息命令"><a href="#查看信息命令" class="headerlink" title="查看信息命令"></a>查看信息命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker system df     # 查看镜像、容器、数据卷所占用空间</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          2         1         316.5MB   72.78MB (22%)</span><br><span class="line">Containers      1         0         1.093kB   1.093kB (100%)</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     2         0         1.863kB   1.863kB</span><br><span class="line">➜  ~</span><br><span class="line"></span><br><span class="line">➜  ~ docker diff wiki      # 查看容器存储层的改动内容</span><br><span class="line">C /etc</span><br><span class="line">C /etc/nginx</span><br><span class="line">C /etc/nginx/conf.d</span><br><span class="line">C /etc/nginx/conf.d/default.conf</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">➜  ~</span><br><span class="line"></span><br><span class="line">➜  ~ docker inspect wiki    # 获取容器/镜像的元数据</span><br><span class="line">➜  ~ docker container logs  # 获取容器的输出信息</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul><li>使用Dockerfile文件来定制镜像</li></ul><p>Dockerfile中的每一个指令都会建立一层，shell命令尽量写在一行中，用 <code>&amp;&amp;</code> 串联，时刻注意这是在构建每一层，而不是shell脚本</p><p>注意每一层构建的最后一定要清理掉无关文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 基础镜像   <span class="comment"># FROM用来指定基础镜像，必须为第一条指令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> 命令        <span class="comment"># RUN指令用来执行命令行命令，与直接在命令行中输入的命令一样</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名 &lt;上下文路径&gt; [-f &lt;dockerfile path&gt;]</span><br></pre></td></tr></table></figure><ul><li>一般来说，应该将Dockerfile文件置于一个空目录下，再将需要用到的文件拷贝到当前目录</li></ul><h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 基础镜像   <span class="comment"># FROM用来指定基础镜像，必须为第一条指令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> 命令        <span class="comment"># RUN指令用来执行命令行命令，与直接在命令行中输入的命令一样</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt; &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> &lt;命令&gt;                <span class="comment"># 用于指定默认容器主进程的启动命令</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;program&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span> ]</span></span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;         <span class="comment"># 用于设置环境变量，容器运行时依旧存在</span></span><br><span class="line"><span class="keyword">ARG</span> &lt;key&gt;[=&lt;value&gt;]       <span class="comment"># 用于设置环境变量，容器运行时不会存在，定义的默认值可使用--build-arg来覆盖，要使用时需要在各个阶段指定</span></span><br><span class="line">VOLUMNE &lt;路径&gt;             <span class="comment"># 定义匿名卷</span></span><br><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...] <span class="comment"># 声明容器运行时提供服务的端口，在执行docker run -P时会随机映射EXPOSE的端口</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> &lt;工作目录路径&gt;       <span class="comment"># 指定工作目录</span></span></span><br><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]     <span class="comment"># 指定当前用户</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;parameters&quot;</span>] <span class="comment"># 指定 RUN、ENTRYPOINT、CMD指令的shell，默认是 /bin/sh -c</span></span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [选项] CMD &lt;命令&gt; <span class="comment"># 设置检查容器健康状况的命令</span></span></span><br><span class="line">--interval=检查时间间隔，默认<span class="number">30</span>s</span><br><span class="line">--timeout=超时时间，默认<span class="number">30</span>s</span><br><span class="line">--retries=重试次数，默认<span class="number">3</span>次</span><br></pre></td></tr></table></figure><blockquote><p>具体内容查看：</p><ul><li><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile">https://yeasy.gitbook.io/docker_practice/image/dockerfile</a></li><li><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></li></ul></blockquote><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h2><blockquote><p><a href="https://yeasy.gitbook.io/docker_practice/compose">https://yeasy.gitbook.io/docker_practice/compose</a></p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><blockquote><p><a href="https://docs.docker.com/config/daemon/systemd/">https://docs.docker.com/config/daemon/systemd/</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="/blog/2022/03/10/vim/"/>
      <url>/blog/2022/03/10/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><blockquote><p>学习：</p><ul><li><a href="https://missing-semester-cn.github.io/2020/editors/">https://missing-semester-cn.github.io/2020/editors/</a></li><li><a href="https://danielmiessler.com/study/vim/">https://danielmiessler.com/study/vim/</a></li></ul></blockquote><p><img src="https://raw.githubusercontent.com/zzZ200/imgrepos/main/Picture202203102110457.gif" alt="img"></p><p><strong>打开文件方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim 文件路径             # 打开指定文件</span><br><span class="line">vim +数字 文件路径    # 打开指定的文件，并且将光标移动到指定行</span><br><span class="line">vim +/关键词 文件的路径# 打开指定文件，并高亮显示关键词</span><br><span class="line">vim 文件路径1 文件路径2 文件路径3 # 同时打开多个文件</span><br></pre></td></tr></table></figure><h2 id="Vim-三种模式"><a href="#Vim-三种模式" class="headerlink" title="Vim 三种模式"></a>Vim 三种模式</h2><h3 id="一般模式-Normal-mode"><a href="#一般模式-Normal-mode" class="headerlink" title="一般模式 (Normal mode)"></a>一般模式 (Normal mode)</h3><ul><li><p>打开文件后默认模式</p></li><li><p>在该模式下不能对文件直接编辑，可以输入快捷键进行一些操作（删除行、复制行、移动光标、粘贴等等）</p></li></ul><h3 id="插入模式-Insert-mode"><a href="#插入模式-Insert-mode" class="headerlink" title="插入模式 (Insert mode)"></a>插入模式 (Insert mode)</h3><ul><li>在该模式下可以对文件的内容进行编辑</li></ul><h3 id="命令模式-Last-line-mode"><a href="#命令模式-Last-line-mode" class="headerlink" title="命令模式 (Last line mode)"></a>命令模式 (Last line mode)</h3><ul><li>可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等）</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><table><thead><tr><th>基本操作</th><th>作用</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:wq</code> 或 <code>ZZ</code></td><td>保存并退出</td></tr><tr><td><code>:e</code></td><td>打开文件</td></tr><tr><td><code>u</code></td><td>undo</td></tr><tr><td><code>Ctrl+r</code></td><td>redo</td></tr><tr><td><code>.</code></td><td>重复上一个操作</td></tr></tbody></table><table><thead><tr><th>光标移动</th><th>作用</th></tr></thead><tbody><tr><td><code>h</code></td><td>往左移动</td></tr><tr><td><code>j</code></td><td>往下移动</td></tr><tr><td><code>k</code></td><td>往上移动</td></tr><tr><td><code>l</code></td><td>往右移动</td></tr><tr><td><code>gg</code></td><td>移动到首行</td></tr><tr><td><code>G</code></td><td>移动到尾行</td></tr><tr><td>m<code>G</code></td><td>移动到第m行</td></tr><tr><td><code>0</code></td><td>到行首</td></tr><tr><td><code>^</code></td><td>到行首第一个非空白字符</td></tr><tr><td><code>$</code></td><td>到行末尾</td></tr><tr><td><code>f</code>&lt;</td><td>跳转到目标字符处(这里是&lt;)</td></tr><tr><td><code>t</code>&lt;</td><td>跳转到目标字符前(这里是&lt;)</td></tr><tr><td><code>Ctrl+f</code></td><td>向下翻屏</td></tr><tr><td><code>Ctrl+b</code></td><td>向上翻屏</td></tr></tbody></table><table><thead><tr><th>删除操作</th><th>作用</th></tr></thead><tbody><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>dt&lt;</code></td><td>删除从光标所在位置到指定字符前的内容(这里是&lt;)</td></tr><tr><td><code>D</code></td><td>清空光标所在位置到行末尾的内容</td></tr><tr><td><code>d</code>m</td><td>删除到指定位置处，例如d0删除从光标位置到行首，dw删除一个单词</td></tr><tr><td><code>C</code></td><td>删除光标所在位置后的内容并进入insert模式</td></tr><tr><td><code>S</code></td><td>删除光标所在行的内容并进入insert模式</td></tr><tr><td><code>cis</code></td><td>删除当前句子内容并进入insert模式</td></tr><tr><td><code>ct</code>&lt;</td><td>删除到目标字符(这里是&lt;)前的内容并进入insert模式</td></tr></tbody></table><table><thead><tr><th>复制粘贴</th><th>作用</th></tr></thead><tbody><tr><td><code>y</code></td><td>复制选中的内容</td></tr><tr><td><code>yip</code></td><td>复制当前段落内容</td></tr><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>p</code></td><td>粘贴到光标后</td></tr><tr><td><code>P</code></td><td>粘贴到光标前</td></tr></tbody></table><table><thead><tr><th>折叠操作</th><th>作用</th></tr></thead><tbody><tr><td><code>zc</code></td><td>折叠代码块</td></tr><tr><td><code>zo</code></td><td>打开折叠</td></tr><tr><td><code>zr</code></td><td>展开所有折叠</td></tr><tr><td><code>za</code></td><td>打开&#x2F;关闭折叠</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set foldmethod = indent   # 用缩进表示折叠，适用于Python</span><br><span class="line">:set foldmethod = syntax   # 根据语法进行折叠</span><br></pre></td></tr></table></figure><table><thead><tr><th>分屏操作</th><th>作用</th></tr></thead><tbody><tr><td><code>Ctrl+W s</code></td><td>上下分割，打开当前文件</td></tr><tr><td><code>:sp filepath</code></td><td>上下分割，打开新文件</td></tr><tr><td><code>Ctrl+W v</code></td><td>左右分割，打开当前文件</td></tr><tr><td><code>:vsp filepath</code></td><td>左右分割，打开新文件</td></tr><tr><td><code>Ctrl+W h</code></td><td>切换到左边的窗口</td></tr><tr><td><code>Ctrl+W j</code></td><td>切换到下边的窗口</td></tr><tr><td><code>Ctrl+W k</code></td><td>切换到上边的窗口</td></tr><tr><td><code>Ctrl+W l</code></td><td>切换到右边的窗口</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:1, $ normal i#         # 批量添加注释符</span><br><span class="line">:% s/old/new/g          # 替换</span><br><span class="line">:/[search]&lt;CR&gt;          # 搜索目标字符串, n查找下一个, N查找上一个</span><br><span class="line">gg=G                    # 自动格式化对齐代码</span><br><span class="line">:20,30d                 # 删除第20行到第30行内容</span><br></pre></td></tr></table></figure><h2 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h2><blockquote><p>vimplus: <a href="https://github.com/chxuan/vimplus">https://github.com/chxuan/vimplus</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">~/.vimrc.custom.config   <span class="comment"># 用户自定义配置</span></span></span><br><span class="line">&quot; 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">~/.vimrc.custom.plugins  <span class="comment"># 用户自定义插件</span></span></span><br><span class="line">&quot; 增加插件后需要进行插件安装，安装步骤如下：</span><br><span class="line">&quot; 1.执行:w保存修改</span><br><span class="line">&quot; 2.执行,s重新加载vim配置</span><br><span class="line">&quot; 3.执行,,i进行插件安装</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>在 vimplus 环境下配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">~/.vimrc.custom.config</span></span><br><span class="line">inoremap kj &lt;ESC&gt;   &quot; 修改ESC按键映射</span><br><span class="line">nnoremap U &lt;c-r&gt;    &quot; 配置U为重做</span><br><span class="line">nnoremap &lt;leader&gt;&lt;leader&gt;r :!./%&lt;cr&gt; &quot; 配置,,r为运行当前脚本</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote><p>在 vimplus 环境下安装</p></blockquote><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><blockquote><p>参考：</p><ul><li><a href="https://mednoter.com/UltiSnips.html">https://mednoter.com/UltiSnips.html</a></li><li><a href="https://github.com/SirVer/ultisnips">https://github.com/SirVer/ultisnips</a></li><li><a href="https://www.sirver.net/blog/2012/01/08/second-episode-of-ultisnips-screencast/">https://www.sirver.net/blog/2012/01/08/second-episode-of-ultisnips-screencast/</a></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">~/.vimrc.custom.plugins</span></span><br><span class="line">Plug &#x27;SirVer/ultisnips&#x27;</span><br><span class="line">Plug &#x27;honza/vim-snippets&#x27;</span><br></pre></td></tr></table></figure><p>安装完成后创建 <code>~/.vim/UltiSnips</code> 目录，在这里面编辑自定义代码块</p><p>创建的代码块文件注意命名：通用代码块（<code>all.snippets</code>）、仅 <code>*.py</code> 文件可用的代码块（<code>python.snippets</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snippet trigger_word [ &quot;description&quot;  [option] ]</span><br><span class="line"></span><br><span class="line">something</span><br><span class="line"></span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><p>快捷键修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">~/.vimrc.custom.config</span></span><br><span class="line">let g:UltiSnipsExpandTrigger=&quot;&lt;c-g&gt;&quot;       # Ctrl+g 触发代码段</span><br><span class="line">let g:UltiSnipsJumpForwardTrigger=&quot;&lt;c-f&gt;&quot; </span><br><span class="line">let g:UltiSnipsJumpBackwardTrigger=&quot;&lt;c-b&gt;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> blog </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
