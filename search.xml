<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker</title>
      <link href="/blog/2022/03/13/docker/"/>
      <url>/blog/2022/03/13/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>学习资料：<a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Docker 是一个开源的应用容器引擎。</li><li>Docker 是一种容器技术，解决软件跨环境迁移的问题，属于操作系统层面的虚拟化技术。</li><li>Docker架构：<a href="https://www.runoob.com/docker/docker-architecture.html">https://www.runoob.com/docker/docker-architecture.html</a></li></ul><p>三个基本概念：</p><ul><li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/image">镜像（Image）</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/container">容器（Container）</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/repository">仓库（Repository）</a></li></ul><p>更详细的介绍见学习资料↑</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p></blockquote><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="服务相关命令"><a href="#服务相关命令" class="headerlink" title="服务相关命令"></a>服务相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">          状态   启动   重启    停止 开机自启 禁用自启</span></span><br><span class="line">systemctl [status|start|restart|stop|enable|disable] docker</span><br></pre></td></tr></table></figure><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images           # 查看现有镜像</span><br><span class="line">docker search redis     # 搜索镜像(例如redis)</span><br><span class="line">docker pull redis:5.0   # 拉取5.0版本redis镜像,不指定镜像仓库地址则从docker.io获取镜像,不指定tag则默认是:latest</span><br><span class="line">docker rmi cefde848bd49 # 删除镜像(可根据IMAGE ID或名称删除, ID可使用短ID,一般取三个字符能区分其他镜像即可)</span><br></pre></td></tr></table></figure><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c1 -p 80:80 -v /home/test/web:/web centos:7 /bin/bash # 启动容器</span><br><span class="line">docker run -id --name=c2 -p 80:80 -v /home/test/web:/web centos:7           # 后台启动容器</span><br><span class="line">-it 交互式容器(-t终端,-i标准输入保持打开)</span><br><span class="line">-id 守护式容器(-d后台)</span><br><span class="line">--name 指定容器名称</span><br><span class="line">-v 宿主机目录(文件):容器内目录(文件) # 将宿主机的目录挂载到容器中</span><br><span class="line">-p 宿主机端口号:容器端口号          # 将容器端口映射到宿主机中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker exec -it c2 /bin/bash # 进入容器</span><br><span class="line">docker ps                    # 查看正在运行的容器</span><br><span class="line">docker ps -a                 # 查看所有容器</span><br><span class="line">docker stop c2               # 停止容器(根据CONTAINER ID或NAMES指定)</span><br><span class="line">docker rm c1                 # 删除容器</span><br><span class="line"></span><br><span class="line">docker rm `docker ps -aq`    # 删除所有容器</span><br><span class="line">docker rmi `docker images -q redis` # 删除所有仓库名为redis的镜像</span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) # 停止并删除所有容器</span><br></pre></td></tr></table></figure><h3 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker volume create vol-demo  # 创建一个名为 vol-demo 的数据卷</span><br><span class="line">docker volume ls               # 查看所有的数据卷</span><br><span class="line">docker volume inspect vol-demo # 查看 vol-demo 数据卷的信息</span><br><span class="line">docker volume rm vol-demo      # 删除 vol-demo 数据卷</span><br><span class="line">docker volume prune            # 删除无主数据</span><br><span class="line">docker run -d -P --name web --mount source=vol-demo,target=/web nginx # 挂载数据卷</span><br></pre></td></tr></table></figure><ul><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li><li>容器删除后，数据卷仍然存在</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">通过mount将宿主机目录挂载到容器，可通过添加,read-only限制只读</span></span><br><span class="line">--mount type=bind,source=/home/test/web,target=/web,read-only </span><br></pre></td></tr></table></figure><h3 id="查看信息命令"><a href="#查看信息命令" class="headerlink" title="查看信息命令"></a>查看信息命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker system df     # 查看镜像、容器、数据卷所占用空间</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          2         1         316.5MB   72.78MB (22%)</span><br><span class="line">Containers      1         0         1.093kB   1.093kB (100%)</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     2         0         1.863kB   1.863kB</span><br><span class="line">➜  ~</span><br><span class="line"></span><br><span class="line">➜  ~ docker diff wiki      # 查看容器存储层的改动内容</span><br><span class="line">C /etc</span><br><span class="line">C /etc/nginx</span><br><span class="line">C /etc/nginx/conf.d</span><br><span class="line">C /etc/nginx/conf.d/default.conf</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">➜  ~</span><br><span class="line"></span><br><span class="line">➜  ~ docker inspect wiki    # 获取容器/镜像的元数据</span><br><span class="line">➜  ~ docker container logs  # 获取容器的输出信息</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul><li>使用Dockerfile文件来定制镜像</li></ul><p>Dockerfile中的每一个指令都会建立一层，shell命令尽量写在一行中，用 <code>&amp;&amp;</code> 串联，时刻注意这是在构建每一层，而不是shell脚本</p><p>注意每一层构建的最后一定要清理掉无关文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 基础镜像   <span class="comment"># FROM用来指定基础镜像，必须为第一条指令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> 命令        <span class="comment"># RUN指令用来执行命令行命令，与直接在命令行中输入的命令一样</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名 &lt;上下文路径&gt; [-f &lt;dockerfile path&gt;]</span><br></pre></td></tr></table></figure><ul><li>一般来说，应该将Dockerfile文件置于一个空目录下，再将需要用到的文件拷贝到当前目录</li></ul><h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 基础镜像   <span class="comment"># FROM用来指定基础镜像，必须为第一条指令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> 命令        <span class="comment"># RUN指令用来执行命令行命令，与直接在命令行中输入的命令一样</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt; &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> &lt;命令&gt;                <span class="comment"># 用于指定默认容器主进程的启动命令</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;program&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span> ]</span></span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;         <span class="comment"># 用于设置环境变量，容器运行时依旧存在</span></span><br><span class="line"><span class="keyword">ARG</span> &lt;key&gt;[=&lt;value&gt;]       <span class="comment"># 用于设置环境变量，容器运行时不会存在，定义的默认值可使用--build-arg来覆盖，要使用时需要在各个阶段指定</span></span><br><span class="line">VOLUMNE &lt;路径&gt;             <span class="comment"># 定义匿名卷</span></span><br><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...] <span class="comment"># 声明容器运行时提供服务的端口，在执行docker run -P时会随机映射EXPOSE的端口</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> &lt;工作目录路径&gt;       <span class="comment"># 指定工作目录</span></span></span><br><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]     <span class="comment"># 指定当前用户</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;parameters&quot;</span>] <span class="comment"># 指定 RUN、ENTRYPOINT、CMD指令的shell，默认是 /bin/sh -c</span></span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [选项] CMD &lt;命令&gt; <span class="comment"># 设置检查容器健康状况的命令</span></span></span><br><span class="line">--interval=检查时间间隔，默认<span class="number">30</span>s</span><br><span class="line">--timeout=超时时间，默认<span class="number">30</span>s</span><br><span class="line">--retries=重试次数，默认<span class="number">3</span>次</span><br></pre></td></tr></table></figure><blockquote><p>具体内容查看：</p><ul><li><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile">https://yeasy.gitbook.io/docker_practice/image/dockerfile</a></li><li><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></li></ul></blockquote><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h2><blockquote><p><a href="https://yeasy.gitbook.io/docker_practice/compose">https://yeasy.gitbook.io/docker_practice/compose</a></p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><blockquote><p><a href="https://docs.docker.com/config/daemon/systemd/">https://docs.docker.com/config/daemon/systemd/</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="/blog/2022/03/10/vim/"/>
      <url>/blog/2022/03/10/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><blockquote><p>学习：</p><ul><li><a href="https://missing-semester-cn.github.io/2020/editors/">https://missing-semester-cn.github.io/2020/editors/</a></li><li><a href="https://danielmiessler.com/study/vim/">https://danielmiessler.com/study/vim/</a></li></ul></blockquote><p><img src="https://raw.githubusercontent.com/zzZ200/imgrepos/main/Picture202203102110457.gif"></p><p><strong>打开文件方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim 文件路径              # 打开指定文件</span><br><span class="line">vim +数字 文件路径     # 打开指定的文件，并且将光标移动到指定行</span><br><span class="line">vim +/关键词 文件的路径   # 打开指定文件，并高亮显示关键词</span><br><span class="line">vim 文件路径1 文件路径2 文件路径3 # 同时打开多个文件</span><br></pre></td></tr></table></figure><h2 id="Vim-三种模式"><a href="#Vim-三种模式" class="headerlink" title="Vim 三种模式"></a>Vim 三种模式</h2><h3 id="一般模式-Normal-mode"><a href="#一般模式-Normal-mode" class="headerlink" title="一般模式 (Normal mode)"></a>一般模式 (Normal mode)</h3><ul><li><p>打开文件后默认模式</p></li><li><p>在该模式下不能对文件直接编辑，可以输入快捷键进行一些操作（删除行、复制行、移动光标、粘贴等等）</p></li></ul><h3 id="插入模式-Insert-mode"><a href="#插入模式-Insert-mode" class="headerlink" title="插入模式 (Insert mode)"></a>插入模式 (Insert mode)</h3><ul><li>在该模式下可以对文件的内容进行编辑</li></ul><h3 id="命令模式-Last-line-mode"><a href="#命令模式-Last-line-mode" class="headerlink" title="命令模式 (Last line mode)"></a>命令模式 (Last line mode)</h3><ul><li>可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等）</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><table><thead><tr><th>基本操作</th><th>作用</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:wq</code> 或 <code>ZZ</code></td><td>保存并退出</td></tr><tr><td><code>:e</code></td><td>打开文件</td></tr><tr><td><code>u</code></td><td>undo</td></tr><tr><td><code>Ctrl+r</code></td><td>redo</td></tr><tr><td><code>.</code></td><td>重复上一个操作</td></tr></tbody></table><table><thead><tr><th>光标移动</th><th>作用</th></tr></thead><tbody><tr><td><code>h</code></td><td>往左移动</td></tr><tr><td><code>j</code></td><td>往下移动</td></tr><tr><td><code>k</code></td><td>往上移动</td></tr><tr><td><code>l</code></td><td>往右移动</td></tr><tr><td><code>gg</code></td><td>移动到首行</td></tr><tr><td><code>G</code></td><td>移动到尾行</td></tr><tr><td>m<code>G</code></td><td>移动到第m行</td></tr><tr><td><code>0</code></td><td>到行首</td></tr><tr><td><code>^</code></td><td>到行首第一个非空白字符</td></tr><tr><td><code>$</code></td><td>到行末尾</td></tr><tr><td><code>f</code>&lt;</td><td>跳转到目标字符处(这里是&lt;)</td></tr><tr><td><code>t</code>&lt;</td><td>跳转到目标字符前(这里是&lt;)</td></tr><tr><td><code>Ctrl+f</code></td><td>向下翻屏</td></tr><tr><td><code>Ctrl+b</code></td><td>向上翻屏</td></tr></tbody></table><table><thead><tr><th>删除操作</th><th>作用</th></tr></thead><tbody><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>dt&lt;</code></td><td>删除从光标所在位置到指定字符前的内容(这里是&lt;)</td></tr><tr><td><code>D</code></td><td>清空光标所在位置到行末尾的内容</td></tr><tr><td><code>d</code>m</td><td>删除到指定位置处，例如d0删除从光标位置到行首，dw删除一个单词</td></tr><tr><td><code>C</code></td><td>删除光标所在位置后的内容并进入insert模式</td></tr><tr><td><code>S</code></td><td>删除光标所在行的内容并进入insert模式</td></tr><tr><td><code>cis</code></td><td>删除当前句子内容并进入insert模式</td></tr><tr><td><code>ct</code>&lt;</td><td>删除到目标字符(这里是&lt;)前的内容并进入insert模式</td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>复制粘贴</th><th>作用</th></tr></thead><tbody><tr><td><code>y</code></td><td>复制选中的内容</td></tr><tr><td><code>yip</code></td><td>复制当前段落内容</td></tr><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>p</code></td><td>粘贴到光标后</td></tr><tr><td><code>P</code></td><td>粘贴到光标前</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:1, $ normal i#         # 批量添加注释符</span><br><span class="line">:% s/old/new/g          # 替换</span><br><span class="line">:/[search]&lt;CR&gt;          # 搜索目标字符串, n查找下一个, N查找上一个</span><br><span class="line">gg=G                    # 自动格式化对齐代码</span><br><span class="line">:20,30d                 # 删除第20行到第30行内容</span><br></pre></td></tr></table></figure><h2 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h2><blockquote><p>vimplus: <a href="https://github.com/chxuan/vimplus">https://github.com/chxuan/vimplus</a></p></blockquote><p>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inoremap jk &lt;ESC&gt;   &quot; 修改ESC按键映射</span><br><span class="line">syntax on           &quot; 语法高亮</span><br><span class="line">set number          &quot; 显示行号</span><br><span class="line">set hlserach        &quot; 高亮搜索内容</span><br><span class="line">set incsearch       &quot; 实时显示搜索内容</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
